/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package todomvc.automation;

import org.junit.jupiter.api.*;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import java.time.Duration;
import java.util.List;


import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class ToDoMVCTestMaster {
    private static ChromeDriver driver;

    static void addItemToList(String item){
        WebElement newItemBox = driver.findElement(By.cssSelector(".new-todo"));
        newItemBox.sendKeys(item);
        newItemBox.sendKeys(Keys.RETURN);
    }
    static WebElement viewList(){
        return driver.findElement(By.cssSelector(".todo-list"));
    }

    @BeforeEach
    void launchBrowser(){
        driver = new ChromeDriver();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
        driver.get("https://todomvc.com");
        WebElement reactLinkText = driver.findElement(By.linkText("React"));
        reactLinkText.click();
    }
    @Test
    public void testCanReachReactPage() {
        assertEquals("React • TodoMVC", driver.getTitle());
    }
    @Test
    void canAddItemWithSingleChar() {
        addItemToList("a");
        Assertions.assertEquals("a", viewList().getText());
    }
    @Test
    void addSingleItem(){
        addItemToList("Buy some milk");
        Assertions.assertEquals("Buy some milk", viewList().getText());
    }
    @Test
    void addMultipleItems(){
        addItemToList("Buy some milk");
        addItemToList("Buy some bread");
        Assertions.assertEquals("Buy some milk\n" + "Buy some bread", viewList().getText());
    }
    @Test
    void canAddPunctuationToItems(){
        addItemToList("!,.\"?");
        Assertions.assertEquals("!,.\"?", viewList().getText());
    }
    @Test
    void canAddSymbolsToItems(){
        addItemToList("!@#%)*~-_");
        Assertions.assertEquals("!@#%)*~-_", viewList().getText());
    }
    @Test
    void canPasteExactly280Chars(){
        WebElement newItemBox = driver.findElement(By.cssSelector(".new-todo"));
        newItemBox.sendKeys("1907351270632232426197022048572973660634481260417686486815226421807238669338989435872373122098187294623512430603601827831968782065157279569698274712918255370234189985716572956062694627644718918726038719711447186608807680350024333838239554355378059448980408931313068845840028065549");
        newItemBox.sendKeys(Keys.chord(Keys.COMMAND, "a"));
        newItemBox.sendKeys(Keys.chord(Keys.COMMAND, "c"));
        newItemBox.sendKeys(Keys.DELETE);
        newItemBox.sendKeys(Keys.chord(Keys.COMMAND, "v"));
        newItemBox.sendKeys(Keys.RETURN);
        Assertions.assertEquals("1907351270632232426197022048572973660634481260417686486815226421807238669338989435872373122098187294623512430603601827831968782065157279569698274712918255370234189985716572956062694627644718918726038719711447186608807680350024333838239554355378059448980408931313068845840028065549", viewList().getText());
    }
    @Test
    void canAddLanguageCharactersToItem(){
        addItemToList("ẞ大本éñ");
        Assertions.assertEquals("ẞ大本éñ", viewList().getText());
    }
    @Test
    void canAddCurrencySymbolsToItem(){
        addItemToList("$£¥€");
        Assertions.assertEquals("$£¥€", viewList().getText());
    }
    @Test
    void canModifyItemInList() {
        Actions act = new Actions(driver);
        addItemToList("Buy some milk");
        WebElement currentItem = driver.findElement(By.cssSelector(".view > label"));
        act.doubleClick(currentItem).perform();
        driver.findElement(By.cssSelector(".edit")).sendKeys(Keys.chord(Keys.COMMAND, "a"));
        driver.findElement(By.cssSelector(".edit")).sendKeys(Keys.DELETE);
        driver.findElement(By.cssSelector(".edit")).sendKeys("Buy some bread");
        driver.findElement(By.cssSelector(".edit")).sendKeys(Keys.ENTER);
        Assertions.assertEquals("Buy some bread", viewList().getText());
    }
    @Test
    void canCancelModifyItemInList() {
        Actions act = new Actions(driver);
        addItemToList("Buy some milk");
        WebElement currentItem = driver.findElement(By.cssSelector(".view > label"));
        act.doubleClick(currentItem).perform();
        driver.findElement(By.cssSelector(".edit")).sendKeys(Keys.BACK_SPACE);
        driver.findElement(By.cssSelector(".edit")).sendKeys(Keys.ESCAPE);
        Assertions.assertEquals("Buy some milk", viewList().getText());
    }
    @Test
    void canMarkItemAsComplete() {
        addItemToList("Buy some milk");
        driver.findElement(By.cssSelector(".toggle")).click();
        WebElement itemTicked = driver.findElement(By.cssSelector(".todo-list")).findElement(By.cssSelector(".completed"));
        Assertions.assertTrue(itemTicked.isDisplayed());
    }
//    @Test //TEST DOES NOT WORK!!!!!!!!!!!!!
//    void canUncheckACompletedItem(){
//        addItemToList("Buy some milk");
//        WebElement toggleCompleted = driver.findElement(By.cssSelector(".toggle"));
//        toggleCompleted.click();
//        WebElement itemTicked = driver.findElement(By.cssSelector(".todo-list")).findElement(By.cssSelector(".todo-list li .toggle:checked + label"));
//        Assertions.assertTrue(itemTicked.isDisplayed());
//        //toggleCompleted.click();
//        WebElement itemNotTicked = driver.findElement(By.cssSelector(".todo-list li .toggle + label"));
//        Assertions.assertTrue(itemNotTicked.isDisplayed());
//    }
    @Test
    public void testStatusBarShowsZeroItemsLeftWhenAddedAndDeleted() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        WebElement itemsRemainingText = driver.findElement(By.cssSelector(".todo-count"));
        assertEquals("2 items left", itemsRemainingText.getText());
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement firstItemToClick = toggleItems.get(1);
        WebElement secondItemToClick = toggleItems.get(0);
        firstItemToClick.click();
        secondItemToClick.click();
        assertEquals("0 items left", itemsRemainingText.getText());
    }
    @Test
    void statusBarShowsOneItemLeft(){
        addItemToList("Buy some milk");
        WebElement itemsLeft = driver.findElement((By.cssSelector(".todo-count")));
        Assertions.assertEquals("1 item left", itemsLeft.getText());
    }
    @Test
    void statusBarShowsTwoItemsLeft(){
        addItemToList("Buy some milk");
        addItemToList("Buy some bread");
        WebElement itemsLeft = driver.findElement((By.cssSelector(".todo-count")));
        Assertions.assertEquals("2 items left", itemsLeft.getText());
    }
    @Test
    void statusBarShows99ItemsLeft(){
        for(int i = 1; i<100; i++){
            addItemToList("New item");
        }
        WebElement itemsLeft = driver.findElement((By.cssSelector(".todo-count")));
        Assertions.assertEquals("99 items left", itemsLeft.getText());
    }
    @Test
    public void testStatusBarShowsOneItemLeftWhenAddedAndDeleted() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        addItemToList("Third Todo");
        WebElement itemsRemainingText = driver.findElement(By.cssSelector(".todo-count"));
        assertEquals("3 items left", itemsRemainingText.getText());
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement firstItemToClick = toggleItems.get(1);
        WebElement secondItemToClick = toggleItems.get(2);
        firstItemToClick.click();
        secondItemToClick.click();
        assertEquals("1 item left", itemsRemainingText.getText());
    }
    @Test
    public void testStatusBarShowsTwoItemsLeftWhenAddedAndDeleted() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        addItemToList("Third Todo");
        WebElement itemsRemainingText = driver.findElement(By.cssSelector(".todo-count"));
        assertEquals("3 items left", itemsRemainingText.getText());
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement itemToClick = toggleItems.get(1);
        itemToClick.click();
        assertEquals("2 items left", itemsRemainingText.getText());
    }
    @Test
    public void testStatusBarShowsNinetyNineItemsLeftAddedAndDeleted() {
        for (int i = 1; i < 101; i++){
            addItemToList(i + " Todo");
        }
        WebElement itemsRemainingText = driver.findElement(By.cssSelector(".todo-count"));
        assertEquals("100 items left", itemsRemainingText.getText());
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement itemToClick = toggleItems.get(1);
        itemToClick.click();
        assertEquals("99 items left", itemsRemainingText.getText());
    }
    @Test
    public void testStatusBarHiddenWhenInitiallyLoaded() {
        assertEquals(0, driver.findElements(By.cssSelector(".footer")).size());
    }
    @Test
    void statusBarHides(){
        Actions act = new Actions(driver);
        addItemToList("Buy some milk");
        WebElement itemsLeft = driver.findElement((By.cssSelector(".todo-count")));
        Assertions.assertEquals("1 item left", itemsLeft.getText());
        act.moveToElement(viewList()).perform();
        WebElement deleteButton = driver.findElement(By.cssSelector(".destroy"));
        deleteButton.click();
        Assertions.assertEquals(0, driver.findElements(By.cssSelector(".filters")).size());
    }
    @Test
    public void testStatusBarHiddenWhenNoItemsLeftAddedDeletedAndCleared() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        addItemToList("Third Todo");
        WebElement itemsRemainingText = driver.findElement(By.cssSelector(".todo-count"));
        WebElement statusBar = driver.findElement(By.cssSelector(".footer"));
        assertEquals("3 items left", itemsRemainingText.getText());
        assertTrue(statusBar.isDisplayed());
        assertEquals(1, driver.findElements(By.cssSelector(".footer")).size());
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement firstItemToClick = toggleItems.get(0);
        WebElement secondItemToClick = toggleItems.get(1);
        WebElement thirdItemToClick = toggleItems.get(2);
        firstItemToClick.click();
        secondItemToClick.click();
        thirdItemToClick.click();
        assertEquals("0 items left", itemsRemainingText.getText());
        driver.findElement(By.cssSelector(".clear-completed")).click();
        assertEquals(0, driver.findElements(By.cssSelector(".footer")).size());
    }
    @Test
    void canDeleteAnIncompleteItem(){
        Actions act = new Actions(driver);
        addItemToList("Buy some milk");
        act.moveToElement(viewList()).perform();
        WebElement deleteButton = driver.findElement(By.cssSelector(".destroy"));
        deleteButton.click();
        Assertions.assertEquals(0, driver.findElements(By.cssSelector("li:nth-child(1) label")).size());
    }
    @Test
    void canDeleteACompletedItem(){
        Actions act = new Actions(driver);
        addItemToList("Buy some milk");
        driver.findElement(By.cssSelector(".toggle")).click();
        act.moveToElement(viewList()).perform();
        WebElement deleteButton = driver.findElement(By.cssSelector(".destroy"));
        deleteButton.click();
        Assertions.assertEquals(0, driver.findElements(By.cssSelector("li:nth-child(1) label")).size());
    }
    @Test
    public void testStatusBarActiveAllCompletedBtnsToggle() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        addItemToList("Third Todo");
        List<WebElement> listItems = driver.findElements(By.cssSelector(".todo-list li"));
        assertEquals(3, listItems.size());
        Integer itemsCompleted = 0;
        Integer itemsActive = 0;
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement itemToClick = toggleItems.get(0);
        itemToClick.click();
        for (WebElement listItem : listItems) {
            String listItemClassName = listItem.getAttribute("class");
            if (listItemClassName.equals("completed")) {
                itemsCompleted++;
            } else {
                itemsActive++;
            }
        }
        driver.findElement(By.linkText("Active")).click();
        List<WebElement> activeListItems = driver.findElements(By.cssSelector(".todo-list li"));
        assertEquals(itemsActive, activeListItems.size());
        driver.findElement(By.linkText("Completed")).click();
        List<WebElement> completedListItems = driver.findElements(By.cssSelector(".todo-list li"));
        assertEquals(itemsCompleted, completedListItems.size());
        driver.findElement(By.linkText("All")).click();
        assertEquals(itemsActive + itemsCompleted, listItems.size());
    }
    @Test
    public void testTodoItemAcceptsTwoHundredFiftySixCharacters() {

        String strToInput = "";
        for (int i = 0; i < 256; i++){
            strToInput = strToInput + 'a';
        }
        addItemToList(strToInput);
        WebElement itemsRemainingText = driver.findElement(By.cssSelector(".todo-count"));
        assertEquals("1 item left", itemsRemainingText.getText());
    }
    @Test
    public void testClearCompletedLinkInStatusBarWhenCompletedItemsPresent(){
        addItemToList("First Todo");
        List<WebElement> clearCompletedTextItems = driver.findElements(By.cssSelector(".clear-completed"));
        assertEquals(0, clearCompletedTextItems.size());
        driver.findElement(By.cssSelector(".toggle")).click();
        WebElement clearCompletedLink = driver.findElement(By.cssSelector(".clear-completed"));
        assertTrue(clearCompletedLink.isDisplayed());
        clearCompletedTextItems = driver.findElements(By.cssSelector(".clear-completed"));
        assertEquals(1, clearCompletedTextItems.size());
    }
    @Test
    public void testCompletedItemsClearWhenClearCompletedLinkClicked() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        WebElement itemsRemainingText = driver.findElement(By.cssSelector(".todo-count"));
        assertEquals("2 items left", itemsRemainingText.getText());
        List<WebElement> clearCompletedTextItems = driver.findElements(By.cssSelector(".clear-completed"));
        assertEquals(0, clearCompletedTextItems.size());
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement itemToClick = toggleItems.get(1);
        itemToClick.click();
        assertEquals("1 item left", itemsRemainingText.getText());
        WebElement clearCompletedLink = driver.findElement(By.cssSelector(".clear-completed"));
        assertTrue(clearCompletedLink.isDisplayed());
        clearCompletedTextItems = driver.findElements(By.cssSelector(".clear-completed"));
        assertEquals(1, clearCompletedTextItems.size());
        clearCompletedLink.click();
        clearCompletedTextItems = driver.findElements(By.cssSelector(".clear-completed"));
        assertEquals(0, clearCompletedTextItems.size());
    }

    @Test
    public void testToggleAllArrowTogglesAllItemsToCompleteWhenOriginallyIncomplete() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        List<WebElement> completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(0, completedItems.size());
        WebElement toggleAllArrow = driver.findElement(By.cssSelector(".main > label"));
        toggleAllArrow.click();
        completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(2, completedItems.size());
    }

    @Test
    public void testToggleAllArrowTogglesAllItemsToIncompleteWhenAllSetToComplete() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement firstItemToClick = toggleItems.get(0);
        WebElement secondItemToClick = toggleItems.get(1);
        firstItemToClick.click();
        secondItemToClick.click();
        List<WebElement> completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(2, completedItems.size());
        WebElement toggleAllArrow = driver.findElement(By.cssSelector(".main > label"));
        toggleAllArrow.click();
        completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(0, completedItems.size());
    }

    @Test
    public void testToggleAllArrowTogglesAllItemsToCompleteWhenMixSetToCompleteAndIncomplete() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement itemToClick = toggleItems.get(1);
        itemToClick.click();
        List<WebElement> completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(1, completedItems.size());
        WebElement toggleAllArrow = driver.findElement(By.cssSelector(".main > label"));
        toggleAllArrow.click();
        completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(2, completedItems.size());
    }

    @Test
    public void testToggleAllArrowTogglesAllItemsToIncompleteWhenOriginallyCompleteAndBackToIncomplete() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        List<WebElement> completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(0, completedItems.size());
        WebElement toggleAllArrow = driver.findElement(By.cssSelector(".main > label"));
        toggleAllArrow.click();
        completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(2, completedItems.size());
        toggleAllArrow.click();
        completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(0, completedItems.size());
    }

    @Test
    public void testToggleAllArrowTogglesAllItemsToIncompleteWhenMixSetOfCompleteAndIncompleteAndThenToAllIncomplete() {
        addItemToList("First Todo");
        addItemToList("Second Todo");
        List<WebElement> toggleItems = driver.findElements(By.cssSelector(".toggle"));
        WebElement itemToClick = toggleItems.get(1);
        itemToClick.click();
        List<WebElement> completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(1, completedItems.size());
        WebElement toggleAllArrow = driver.findElement(By.cssSelector(".main > label"));
        toggleAllArrow.click();
        completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(2, completedItems.size());
        toggleAllArrow.click();
        completedItems = driver.findElements(By.cssSelector(".completed"));
        assertEquals(0, completedItems.size());
    }





//    @Test //Test does not work, limitation of ChromeDriver. Won't accept emojis
//    void canAddEmojiToItem(){
//        addItemToList("\uD83D\uDE00");
//        Assertions.assertEquals("\uD83D\uDE00", viewList().getText());
//    }

    @AfterEach
    void quitBrowser(){driver.quit(); }


}

